"tumor" = df$tumor[[1]],
"swi_gene" = df$swi_gene[[1]],
"wilcox_pvalue" = pvalue,
"med_mut_burden_wt" = median(wt_vals),
"med_mut_burden_mut" = median(mut_vals))
}
pvalue_df <- boxplot_df %>%
select(tumor, swi_gene, mut_burden, status) %>%
group_by(tumor, swi_gene) %>%
do(do_wilcox_test(.))
View(pvalue_df)
display_df <- pvalue_df %>%
drop_na() %>%
filter(wilcox_pvalue < 0.05) %>%
mutate(pvalue = round(wilcox_pvalue, 4)) %>%
mutate(neg_log_pvalue = round(- log10(wilcox_pvalue), 4)) %>%
select(-wilcox_pvalue) %>%
arrange(desc(neg_log_pvalue))
View(display_df)
shiny::runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
user_group_df <- read_csv("/home/aelamb/Downloads/TCGA iAtlas.csv")
View(user_group_df)
df = panimmune_data$fmx_df
df$ParticipantBarcode
user_group_df$ParticipantID %in% df$ParticipantBarcode
user_group_df %>%
rename("ParticipantBarcode" = colnames(user_group_df)[[1]])
user_group_df %>%
rename("ParticipantBarcode" = colnames(user_group_df)[[1]]) %>%
inner_join(df)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
?req
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/survivalmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/swi_gene_analysis/all_cancer_analysis/univariate_gene_analysis.R', echo=TRUE)
remove(training_df)
remove(training_df, df)
names(models) <- all_genes
names(models)
install.packages("synapser", repos = c("https://sage-bionetworks.github.io/ran", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("https://sage-bionetworks.github.io/ran", "http://cran.fhcrc.org"))
library(synapser)
library(tidyverse)
synapser::synLogin()
install.packages("synapserutils", repos=c("https://sage-bionetworks.github.io/ran", "http://cran.fhcrc.org"))
library(synapserutils)
library(magrittr)
sub <- synapser::synGetSubmission(9681710)
sub$filePath
sub <- synapser::synGetSubmission(9681713)
sub$filePath
setwd("/home/aelamb")
dir.create("temp_dir")
setwd("temp_dir")
getwd()
file.copy(path, ".")
path <- sub$filePath
file.copy(path, ".")
sub$entityId
system(str_c("unzip ", basename(path)))
df <- read_csv("TESLA_OUT_1.csv")
View(df)
View(df)
setwd("../")
getwd()
system("rm -rf temp_dir")
library(synapser)
library(tidyverse)
setwd("/home/aelamb")
dir.create("temp_dir")
setwd("temp_dir")
synapser::synLogin()
sub <- synapser::synGetSubmission(9681713)
path <- sub$filePath
file.copy(path, ".")
system(str_c("unzip ", basename(path)))
getwd()
setwd("../")
system("rm -rf temp_dir")
setwd("/home/aelamb")
dir.create("temp_dir")
setwd("temp_dir")
synapser::synLogin()
sub <- synapser::synGetSubmission(9681710)
path <- sub$filePath
file.copy(path, ".")
system(str_c("unzip ", basename(path)))
df <- read_csv("TESLA_OUT_1.csv")
View(df)
df <- read_csv("TESLA_OUT_3.csv")
setwd("../")
system("rm -rf temp_dir")
library(synapser)
library(tidyverse)
setwd("/home/aelamb")
dir.create("temp_dir")
setwd("temp_dir")
synapser::synLogin()
sub <- synapser::synGetSubmission(9681713)
path <- sub$filePath
file.copy(path, ".")
system(str_c("unzip ", basename(path)))
setwd("../")
system("rm -rf temp_dir")
shiny::runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/utils.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
library(doMC)
library(plyr)
library(tidyverse)
library(synapser)
# library(synapseClient)
library(data.table)
library(magrittr)
# library(randomForest)
library(pheatmap)
library(ggfortify)
library(ROCR)
source("/home/aelamb/repos/swi_gene_analysis/scripts/utils.R")
source("/home/aelamb/repos/swi_gene_analysis/scripts/synapser_functions.R")
# source("/home/aelamb/repos/swi_gene_analysis/scripts/synapseClient_functions.R")
synLogin()
# synapseLogin()
registerDoMC(cores = detectCores() - 1)
pvalues_id <- "syn17008355"
training_id <- "syn17008116"
testing_id  <- "syn17008114"
tcga_pat_id      <- "syn11924167"
tcga_mut_id      <- "syn11924339"
swi_genes <- c(
"ACTB",
"ARID1A",
"ARID1B",
"ARID2",
"BCL11A",
"BCL11B",
"BRD7",
"BRD9",
"PBRM1",
"PHF10",
"SMARCA2",
"SMARCA4",
"SMARCB1",
"SMARCC2",
"SMARCD1",
"SMARCD2",
"SMARCD3",
"SMARCE1",
"SS18")
knitr::opts_chunk$set(fig.width=14, fig.height=10)
pvalues_df <- create_df_from_synapse_id(pvalues_id)
training_df <- training_id %>%
create_df_from_synapse_id()
swi_status_df <- training_df %>%
select(patient, SWI_status) %>%
mutate(SWI_status = ifelse(SWI_status == "wt", 1, 0))
top_genes <- pvalues_df %>%
slice(1:100) %>%
use_series(gene)
top_matrix <- training_df %>%
select(c("patient", top_genes)) %>%
df_to_matrix("patient")
make_heatmap <- function(mat, ...){
color <- colorRampPalette(c("red", "white", "blue"))(50)
breaks <- c(seq(-1,
0,
length.out=ceiling(25) + 1),
seq(1/50,
max(scale(mat)),
length.out=floor(25)))
pheatmap(mat, color=color, breaks=breaks, scale = "row", ...)
}
make_heatmap2 <- function(mat, ...){
color <- colorRampPalette(c("red", "white", "blue"))(50)
breaks <- c(seq(-1,
0,
length.out=ceiling(25) + 1),
seq(1/50,
max(mat),
length.out=floor(25)))
pheatmap(mat, color=color, breaks=breaks, ...)
}
gene_cor_matrix <- cor(top_matrix)
clusters <- 1
phm_obj <- make_heatmap2(gene_cor_matrix, cutree_rows = clusters, cutree_cols = clusters)
clusters <- 2
clusters_df <- phm_obj$tree_row %>%
cutree(k = clusters) %>%
enframe() %>%
set_colnames(c("Hugo", "Metagene")) %>%
mutate(Metagene = str_c("MG", Metagene))
metagene_df <- top_matrix %>%
t %>%
matrix_to_df("Hugo") %>%
inner_join(clusters_df) %>%
select(Metagene, everything())
mg_pca_objs <- metagene_df %>%
split(.$Metagene) %>%
map(select, - Metagene) %>%
map(df_to_matrix, "Hugo") %>%
map(t) %>%
map(prcomp)
autoplot(
mg_pca_objs[[1]],
main = "PC 1 vs 2, patients, mg1") +
theme_bw()
autoplot(
mg_pca_objs[[2]],
main = "PC 1 vs 2, patients, mg2") +
theme_bw()
mg1_pc1 <- mg_pca_objs[[1]]$x[,"PC1"]
mg2_pc1 <- mg_pca_objs[[2]]$x[,"PC1"]
mg1_genes <- metagene_df %>%
filter(Metagene == "MG1") %>%
use_series(Hugo)
mg2_genes <- metagene_df %>%
filter(Metagene == "MG2") %>%
use_series(Hugo)
mg1_matrix <- top_matrix[,mg1_genes]
mg2_matrix <- top_matrix[,mg2_genes]
mg1_genes_central <- mg1_genes[rank(- abs(cor(mg1_pc1, mg1_matrix))) < 6 ]
mg2_genes_central <- mg2_genes[rank(- abs(cor(mg2_pc1, mg2_matrix))) < 6 ]
mg1_central_df <- top_matrix[,mg1_genes_central] %>%
rowMeans %>%
enframe("patient", "MG1")
mg2_central_df <- top_matrix[,mg2_genes_central] %>%
rowMeans %>%
enframe("patient", "MG2")
glm_df <- training_df %>%
select(patient, tumor, SWI_status) %>%
mutate(SWI_status = ifelse(SWI_status == "wt", 0, 1)) %>%
inner_join(mg1_central_df) %>%
inner_join(mg2_central_df) %>%
select(-patient)
model <- glm(
SWI_status ~ .,
data = glm_df,
family = "binomial")
summary(model)
model2 <- glm(
SWI_status ~ MG1 + MG2,
data = glm_df,
family = "binomial")
summary(model2)
columns <- c("patient", "tumor", "SWI_status", mg1_genes_central, mg2_genes_central)
testing_df <- testing_id %>%
create_df_from_synapse_id(select = columns) %>%
mutate(SWI_status = ifelse(SWI_status == "wt", 0, 1)) %>%
gather(key = "Hugo", value = "expr", -c(patient, tumor, SWI_status)) %>%
mutate(Metagene = ifelse(Hugo %in% mg1_genes_central, "MG1", "MG2")) %>%
group_by(patient, tumor, SWI_status, Metagene) %>%
summarise(expr = mean(expr)) %>%
ungroup() %>%
spread(key = "Metagene", value = "expr") %>%
select(-patient)
scores <- predict.glm(model, testing_df, type = "response")
pred   <- prediction(scores, testing_df$SWI_status)
auc    <- performance(pred, "auc")@y.values[[1]]
print(auc)
contingency_df <- testing_df %>%
inset("prediction", value = scores) %>%
mutate(prediction2 = round(prediction))
table(contingency_df$SWI_status, contingency_df$prediction2) %>%
addmargins()
scores2 <- predict.glm(model2, testing_df, type = "response")
pred2   <- prediction(scores2, testing_df$SWI_status)
auc2    <- performance(pred2, "auc")@y.values[[1]]
print(auc2)
contingency_df2 <- testing_df %>%
inset("prediction", value = scores2) %>%
mutate(prediction2 = round(prediction))
table(contingency_df2$SWI_status, contingency_df2$prediction2) %>%
addmargins()
get_auc <- function(df, model){
print(df)
# scores <- predict.glm(model, df, type = "response")
# pred   <- prediction(scores, testing_df$SWI_status)
# auc    <- performance(pred, "auc")@y.values[[1]]
}
x <- testing_df %>%
split(.$tumor) %>%
map(get_auc, model)
testing_df %>%
split(.$tumor) %>%
map(get_auc, model)
get_auc <- function(df, model){
print(df)
scores <- predict.glm(model, df, type = "response")
print(scores)
# pred   <- prediction(scores, testing_df$SWI_status)
# auc    <- performance(pred, "auc")@y.values[[1]]
}
testing_df %>%
split(.$tumor) %>%
map(get_auc, model)
get_auc <- function(df, model){
print(df)
scores <- predict.glm(model, df, type = "response")
print(length(scores))
# pred   <- prediction(scores, testing_df$SWI_status)
# auc    <- performance(pred, "auc")@y.values[[1]]
}
testing_df %>%
split(.$tumor) %>%
map(get_auc, model)
get_auc <- function(df, model){
scores <- predict.glm(model, df, type = "response")
pred   <- prediction(scores, df$SWI_status)
auc    <- performance(pred, "auc")@y.values[[1]]
}
testing_df %>%
split(.$tumor) %>%
map(get_auc, model)
get_auc <- function(df, model){
scores <- predict.glm(model, df, type = "response")
pred   <- prediction(scores, df$SWI_status)
auc    <- performance(pred, "auc")@y.values[[1]]
}
testing_df %>%
split(.$tumor) %>%
map(get_auc, model) %>%
enframe
x <- testing_df %>%
split(.$tumor) %>%
map(get_auc, model) %>%
enframe
View(x)
x
x <- testing_df %>%
split(.$tumor) %>%
map_dbl(get_auc, model) %>%
enframe
x
auc_df1 <- testing_df %>%
split(.$tumor) %>%
map_dbl(get_auc, model) %>%
set_colnames(tumor, model1_auc)
auc_df1 <- testing_df %>%
split(.$tumor) %>%
map_dbl(get_auc, model) %>%
set_colnames(c("tumor", "model1_auc"))
auc_df1 <- testing_df %>%
split(.$tumor) %>%
map_dbl(get_auc, model) %>%
enframe() %>%
set_colnames(c("tumor", "model1_auc"))
auc_df2 <- testing_df %>%
split(.$tumor) %>%
map_dbl(get_auc, model2) %>%
enframe() %>%
set_colnames(c("tumor", "model2_auc"))
auc_df <- left_join(auc_df1, auc_df2)
View(auc_df)
library(knitr)
mutation_df %>%
df_to_matrix("tumor") %>%
pheatmap()
patient_df <- tcga_pat_id %>%
create_df_from_synapse_id(select = c("patient", "tumor"))
mutation_df<- tcga_mut_id %>%
create_df_from_synapse_id(select = c("patient", "Hugo_Symbol")) %>%
filter(Hugo_Symbol %in% swi_genes) %>%
distinct %>%
mutate(status = 1) %>%
mutate(patient = factor(patient, levels = patient_df$patient)) %>%
complete(patient, Hugo_Symbol, fill = list(status = 0)) %>%
full_join(patient_df) %>%
group_by(tumor, Hugo_Symbol) %>%
summarise(rate =  sum(status) / n()) %>%
spread(key = "Hugo_Symbol", value = "rate")
mutation_df %>%
df_to_matrix("tumor") %>%
pheatmap()
kable(mutation_df)
shiny::runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
library(synapser)
library(tidyverse)
evaluation_id <- 9614078L
upload_dir_id <- "" #put the synapse id of the directory you want to upload the files to
synapser::synLogin()
upload_file_to_synapse <- function(
path, synapse_id, annotation_list = NULL, activity_obj = NULL){
entity <- synapser::File(
path = path,
parent = synapse_id,
annotations = annotation_list)
entity <- synapser::synStore(entity, activity = activity_obj)
return(entity)
}
syn_ids <- evaluation_id %>%
synapser::synGetSubmissions(status = "SCORED") %>%
as.list() %>%
purrr::map_chr("id") %>%
as.integer()
submissions <- purrr::map(syn_ids, synGetSubmission)
library(synapser)
library(tidyverse)
evaluation_id <- 9614078L
upload_dir_id <- "" #put the synapse id of the directory you want to upload the files to
synapser::synLogin()
upload_file_to_synapse <- function(
path, synapse_id, annotation_list = NULL, activity_obj = NULL){
entity <- synapser::File(
path = path,
parent = synapse_id,
annotations = annotation_list)
entity <- synapser::synStore(entity, activity = activity_obj)
return(entity)
}
submissions0 <- evaluation_id %>%
synapser::synGetSubmissions(status = "SCORED") %>%
as.list()
submissions0 <- evaluation_id %>%
# synapser::synGetSubmissions(status = "SCORED") %>%
synapser::synGetSubmissions() %>%
as.list()
x <- submissions0[[1]]
x$contributors
x$contributors
x$name
x
x <- submissions0[[1]]
submissions0
setwd("~/repos/irwg/iatlas-workflows/sample_files/fastq")
setwd("~/repos/irwg/iatlas-workflows/utils/R_utils/Docker")
source('~/repos/irwg/iatlas-workflows/sample_files/fastq/make_sample_fastqs.R', echo=TRUE)
setwd("~/repos/irwg/iatlas-workflows/sample_files/fastq")
source('~/repos/irwg/iatlas-workflows/sample_files/fastq/make_sample_fastqs.R', echo=TRUE)
